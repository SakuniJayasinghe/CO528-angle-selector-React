{"version":3,"sources":["AngleSelector.js","App.js","reportWebVitals.js","index.js"],"names":["AngleSelector","angle","setAngle","useState","handleRadioChange","e","parseInt","target","value","React","createElement","className","type","id","min","max","onChange","length","startsWith","slice","numericValue","isNaN","map","val","key","name","checked","App","reportWebVitals","onPerfEntry","Function","__webpack_require__","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode"],"mappings":"0LAuEeA,MApEOA,KACpB,MAAOC,EAAOC,GAAYC,mBAAS,GAsB7BC,EAAqBC,IACzBH,EAASI,SAASD,EAAEE,OAAOC,MAAO,MAGpC,OACEC,IAAAC,cAAA,OAAKC,UAAU,aACbF,IAAAC,cAAA,UAAI,kBACJD,IAAAC,cAAA,OAAKC,UAAU,YACbF,IAAAC,cAAA,SACEE,KAAK,SACLC,GAAG,aACHL,MAAOP,EACPa,IAAI,IACJC,IAAI,MACJC,SAlCmBX,IACzB,IAAIG,EAAQH,EAAEE,OAAOC,MAGjBA,EAAMS,OAAS,GAAKT,EAAMU,WAAW,OACrCV,EAAQA,EAAMW,MAAM,IAIxB,IAAIC,EAAed,SAASE,EAAO,KAC/Ba,MAAMD,IAAiBA,EAAe,KAAGA,EAAe,GACxDA,EAAe,MAAKA,EAAe,KAEvClB,EAASkB,OAwBPX,IAAAC,cAAA,OAAKC,UAAU,YACbF,IAAAC,cAAA,SACEE,KAAK,QACLC,GAAG,cACHC,IAAI,IACJC,IAAI,MACJP,MAAOP,EACPe,SA5BoBX,IAC1BH,EAASI,SAASD,EAAEE,OAAOC,MAAO,SA8BhCC,IAAAC,cAAA,OAAKC,UAAU,wBACZ,CAAC,EAAG,GAAI,GAAI,GAAI,KAAKW,IAAKC,GACzBd,IAAAC,cAAA,SAAOc,IAAKD,GACVd,IAAAC,cAAA,SACEE,KAAK,QACLa,KAAK,SACLjB,MAAOe,EACPG,QAASzB,IAAUsB,EACnBP,SAAUZ,IACT,IACFmB,EAAI,YCpDFI,MARf,WACE,OACElB,IAAAC,cAAA,OAAKC,UAAU,OACbF,IAAAC,cAACV,EAAa,QCML4B,MAZSC,IAClBA,GAAeA,aAAuBC,UACxCC,EAAA1B,EAAA,GAAA2B,KAAAD,EAAAE,KAAA,UAAqBD,KAAKE,IAAiD,IAAhDC,OAAEA,EAAMC,OAAEA,EAAMC,OAAEA,EAAMC,OAAEA,EAAMC,QAAEA,GAASL,EACpEC,EAAON,GACPO,EAAOP,GACPQ,EAAOR,GACPS,EAAOT,GACPU,EAAQV,MCDDW,IAASC,WAAWC,SAASC,eAAe,SACpDC,OACHnC,IAAAC,cAACD,IAAMoC,WAAU,KACfpC,IAAAC,cAACiB,EAAG,QAORC","file":"static/js/main.e5039932.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport './AngleSelector.css'; // Import the CSS styles\r\n\r\nconst AngleSelector = () => {\r\n  const [angle, setAngle] = useState(0);\r\n\r\n  const handleInputChange = (e) => {\r\n    let value = e.target.value;\r\n    \r\n    // Replace leading zero if the input is not just \"0\"\r\n    if (value.length > 1 && value.startsWith('0')) {\r\n        value = value.slice(1);\r\n    }\r\n\r\n    // Convert value to a number and handle bounds\r\n    let numericValue = parseInt(value, 10);\r\n    if (isNaN(numericValue) || numericValue < 0) numericValue = 0;\r\n    if (numericValue > 360) numericValue = 360;\r\n    \r\n    setAngle(numericValue);\r\n};\r\n\r\n  const handleSliderChange = (e) => {\r\n    setAngle(parseInt(e.target.value, 10));\r\n  };\r\n\r\n  const handleRadioChange = (e) => {\r\n    setAngle(parseInt(e.target.value, 10));\r\n  };\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      <h1>Angle Selector</h1>\r\n      <div className=\"controls\">\r\n        <input\r\n          type=\"number\"\r\n          id=\"angleInput\"\r\n          value={angle}\r\n          min=\"0\"\r\n          max=\"360\"\r\n          onChange={handleInputChange}\r\n        />\r\n      </div>\r\n      <div className=\"controls\">\r\n        <input\r\n          type=\"range\"\r\n          id=\"angleSlider\"\r\n          min=\"0\"\r\n          max=\"360\"\r\n          value={angle}\r\n          onChange={handleSliderChange}\r\n        />\r\n      </div>\r\n      <div className=\"controls radio-group\">\r\n        {[0, 45, 60, 90, 180].map((val) => (\r\n          <label key={val}>\r\n            <input\r\n              type=\"radio\"\r\n              name=\"preset\"\r\n              value={val}\r\n              checked={angle === val}\r\n              onChange={handleRadioChange}\r\n            />{' '}\r\n            {val}Â°\r\n          </label>\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AngleSelector;\r\n","import React from 'react';\nimport AngleSelector from './AngleSelector';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <AngleSelector />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}